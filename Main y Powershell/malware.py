import os
import logging
import argparse

# Configurar logging
logging.basicConfig(filename='malware_scanner.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

# Definir las firmas de malware (patrones sospechosos)
MALWARE_PATTERNS = [
    'malicious_pattern1',
    'malicious_pattern2',
    'suspicious_function_call'
]

def is_valid_directory(path):
    """Validar si el directorio proporcionado es válido."""
    if not os.path.isdir(path):
        logging.error(f"Directorio no válido: {path}")
        raise ValueError(f"Directorio no válido: {path}")
    return True

def scan_file(file_path):
    """Escanear un archivo en busca de patrones de malware."""
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            content = file.read()
            for pattern in MALWARE_PATTERNS:
                if pattern in content:
                    logging.warning(f"Malware detectado en {file_path} - Patrón: {pattern}")
                    return True
    except UnicodeDecodeError:
        logging.warning(f"No se puede leer {file_path} debido a problemas de codificación.")
    except Exception as e:
        logging.error(f"Error al escanear el archivo {file_path}: {e}")
        raise
    return False

def scan_directory(directory_path):
    """Escanear todos los archivos en el directorio en busca de malware."""
    results = []
    try:
        is_valid_directory(directory_path)
        for root, _, files in os.walk(directory_path):
            for file in files:
                file_path = os.path.join(root, file)
                logging.info(f"Escaneando archivo: {file_path}")
                if scan_file(file_path):
                    results.append(f"Posible malware encontrado en {file_path}. Revisa el archivo 'malware_scanner.log' para más detalles.")
        return results
    except Exception as e:
        logging.error(f"Error al escanear el directorio {directory_path}: {e}")
        raise

def main():
    # Configurar argparse para recibir la ruta del directorio como argumento
    parser = argparse.ArgumentParser(description="Escanear malware en un directorio.")
    parser.add_argument("directory_path", type=str, help="Ruta del directorio a escanear.")

    # Parsear los argumentos
    args = parser.parse_args()

    # Realizar el escaneo del directorio
    results = scan_directory(args.directory_path)

    # Guardar los resultados en un archivo txt
    if results:
        with open("malware_scanner_output.txt", "a") as archivo:
            archivo.write("\nResultados del escaneo:\n")
            for result in results:
                archivo.write(f"{result}\n")
        logging.info("Resultados guardados en 'malware_scanner_output.txt'")
    else:
        logging.info("No se encontró malware en los archivos escaneados.")

if __name__ == "__main__":
    main()

